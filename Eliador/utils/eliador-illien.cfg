#textdomain wesnoth-Eliador
next_scenario=null
name= _ "Illien"
victory_when_enemies_defeated=no
map_data="{@campaigns/Eliador/maps/eliador-illien.map}"

turns=40

[music]
    name=northerners.ogg
[/music]

[side]
    side=1
    team_name=good
    controller=human
    no_leader=yes
[/side]

[side]
    side=2
    team_name=bad
    controller=null
    no_leader=yes
[/side]

[side]
    side=3
    team_name=good
    controller=null
    no_leader=yes
    colour=red
[/side]

[side]
    side=4
    team_name=bad
    controller=null
    no_leader=yes
    colour=green
[/side]

[event]
    name=prestart

    [objectives]
        summary=Play a game of Othello
        note="
A move is valid if Othello's units will be between two of yours. To place a unit on the board:
  (1) Move Ardella to select the column
  (2) Move Ardella to select the row
  (3) Press 'End Turn'"
        [objective]
            description= _ "You don't lose Anna or Zeke"
            condition=win
        [/objective]
        [objective]
            description= _ "You lose Anna or Zeke"
            condition=lose
        [/objective]
        [objective]
            description= _ "Turns run out"
            condition=lose
        [/objective]
    [/objectives]

    #Unlock Varad if Balas played
    [if]
        [variable]
            name=scenario_locs[6].played
            equals=yes
        [/variable]
        [then]
            {VARIABLE scenario_locs[8].playable yes}
        [/then]
    [/if]

    {UNSTORE_AT ardella_store 1 11 3}
    {UNSTORE_AT anna_store 1 10 2}
    {UNSTORE_AT zeke_store 1 12 2}
    {UNSTORE_AT heldurin_store 3 10-12 1}

    {UNIT_LEADER (Dark Sorcerer) Othello ( _ "Othello") 2 11 19}

    {VARIABLE col -1}
    {VARIABLE row -1}
    {VARIABLE checker_count 4}
    {VARIABLE prev_checker_count -1}

    {VARIABLE valid_dir_count 0}
[/event]

[event]
    name=start

    {UNIT_MSG (description=Othello) ( _ "Ardella, I'm sure you're aware of the law of Illien. Are you prepared?")}
    {UNIT_MSG (description=Ardella) ( _ "You must know that we are about to be invaded. We don't have time for your games. Will you help us repel the invasion?")}
    {UNIT_MSG (description=Othello) ( _ "If you do not obey the law of Illien, my undead will annihilate your pathetic army. Now, let's begin, shall we?")}

    #Anna, Zeke are your initial checkers
    {STORE_UNITS anna_store (description=Anna) yes}
    {STORE_UNITS zeke_store (description=Zeke) yes}
    {UNSTORE_AT anna_store 3 10 10}
    {UNSTORE_AT zeke_store 3 12 12}
    {UNIT_MSG (description=Zeke) ( _ "Momma, what's happening? I can't move!")}
    [redraw] [/redraw]
    [delay]
        time=500
    [/delay]

    #Othello's first two checkers appear
    {UNIT_NAMELESS Revenant 4 10 12}
    {UNIT_NAMELESS (Bone Shooter) 4 12 10}
    {UNIT_MSG (description=Zeke) ( _ "Ahh!")}

    {STORE_UNITS ardella_mod_store (description=Ardella) no}

    #Backup Ardella  before modifying her
    {STORE_UNITS ardella_store (description=Ardella) yes}

    #Ensure that Ardella can only move inside castle
    {VARIABLE ardella_mod_store.movement_costs.swamp_water 100}
    {VARIABLE ardella_mod_store.movement_costs.grassland 100}
    {VARIABLE ardella_mod_store.movement_costs.forest 100}
    {VARIABLE ardella_mod_store.movement_costs.castle 1}
    {VARIABLE ardella_mod_store.max_moves 20}
    {VARIABLE ardella_mod_store.moves $ardella_mod_store.max_moves}
    {VARIABLE ardella_mod_store.x 11}
    {VARIABLE ardella_mod_store.y 4}
    [unstore_unit]
        variable=ardella_mod_store
    [/unstore_unit]

    #Do the same for Othello
    {STORE_UNITS othello_store (description=Othello) no}
    {VARIABLE othello_store.movement_costs.swamp_water 100}
    {VARIABLEothello_store.movement_costs.grassland 100}
    {VARIABLE othello_store.movement_costs.forest 100}
    {VARIABLE othello_store.movement_costs.castle 1}
    {VARIABLE othello_store.max_moves 20}
    {VARIABLE othello_store.moves $othello_store.max_moves}
    [unstore_unit]
        variable=othello_store
    [/unstore_unit]

    {CLEAR_VARIABLE ardella_mod_store}
    {CLEAR_VARIABLE othello_store}

    #Monsters spawn in family's place
    {UNSTORE_AT anwar_store 3 10-12 2}
[/event]

#define MOVE_TO_BOARD INSERT_CHECKER_WML
    [if]
        [variable]
            name=valid_move
            equals=yes
        [/variable]
        [then]
            #Place unit on the board
            {INSERT_CHECKER_WML}

            {VARIABLE_OP checker_count add 1}

            #Change sides in all valid directions
            [while]
                [variable]
                    name=valid_dir_count
                    greater_than=0
                [/variable]
                [do]
                    {VARIABLE x $valid_x}
                    {VARIABLE y $valid_y}

                    {VARIABLE_OP valid_dir_count add -1}
                    {VARIABLE_OP x_dir to_variable valid_dir_$valid_dir_count|_x}
                    {VARIABLE_OP y_dir to_variable valid_dir_$valid_dir_count|_y}

                    #Change sides of other side's units
                    {VARIABLE_OP x add $x_dir}
                    {VARIABLE_OP y add $y_dir}
                    [while]
                        [have_unit]
                            [not]
                                side= $valid_side
                            [/not]
                            x=$x
                            y=$y
                        [/have_unit]
                        [do]
                            {MODIFY_UNIT (
                            x=$x
                            y=$y) side $valid_side}
                            {VARIABLE_OP x add $x_dir}
                            {VARIABLE_OP y add $y_dir}
                        [/do]
                    [/while]
                [/do]
            [/while]
        [/then]
    [/if]
#enddef

#define CHECK_DIR X Y SIDE X_DIR Y_DIR
    {VARIABLE x ({X})}
    {VARIABLE y ({Y})}
    {VARIABLE_OP x add ({X_DIR})}
    {VARIABLE_OP y add ({Y_DIR})}

    #Count number of other side's checkers
    {VARIABLE num_other_color 0}
    [while]
        [have_unit]
            [not]
                side={SIDE}
            [/not]
            x=$x
            y=$y
        [/have_unit]
        [do]
            {VARIABLE_OP num_other_color add 1}
            {VARIABLE_OP x add ({X_DIR})}
            {VARIABLE_OP y add ({Y_DIR})}
        [/do]
    [/while]

    #If other side has more than 1 checker and your unit is next
    [if]
        [variable]
            name=num_other_color
            greater_than=0
        [/variable]
        [have_unit]
            side={SIDE}
            x=$x
            y=$y
        [/have_unit]
        [then]
            #This is a valid direction, so add it
            {VARIABLE_OP var format valid_dir_$valid_dir_count|_x}
            {VARIABLE $var ({X_DIR})}
            {VARIABLE_OP var format valid_dir_$valid_dir_count|_y}
            {VARIABLE $var ({Y_DIR})}
            {VARIABLE_OP valid_dir_count add 1}

            {VARIABLE valid_move yes}
            {VARIABLE valid_x ({X})}
            {VARIABLE valid_y ({Y})}
            {VARIABLE valid_side ({SIDE})}
        [/then]
    [/if]

    {CLEAR_VARIABLE x}
    {CLEAR_VARIABLE y}
    {CLEAR_VARIABLE num_other_color}
#enddef

#define CHECK_MOVE X Y SIDE
    [if]
        [variable]
            name=valid_move
            equals=no
        [/variable]
        [not]
            [have_unit]
                x={X}
                y={Y}
            [/have_unit]
        [/not]
        [then]
            #Check all directions
            {CHECK_DIR ({X}) ({Y}) ({SIDE}) -2 -2}
            {CHECK_DIR ({X}) ({Y}) ({SIDE}) -2 0}
            {CHECK_DIR ({X}) ({Y}) ({SIDE}) -2 2}
            {CHECK_DIR ({X}) ({Y}) ({SIDE}) 0 -2}
            {CHECK_DIR ({X}) ({Y}) ({SIDE}) 0 2}
            {CHECK_DIR ({X}) ({Y}) ({SIDE}) 2 -2}
            {CHECK_DIR ({X}) ({Y}) ({SIDE}) 2 0}
            {CHECK_DIR ({X}) ({Y}) ({SIDE}) 2 2}
        [/then]
    [/if]
#enddef

#define CHECK_GAME_OVER
    #End level if neither player made a move last turn
    [if]
        [variable]
            name=checker_count
            equals=$prev_checker_count
        [/variable]
        [or]
            [variable]
                name=checker_count
                equals=36
            [/variable]
        [/or]
        [then]
            [if]
                [have_unit]
                    side=3
                    description=Anna
                [/have_unit]
                [have_unit]
                    side=3
                    description=Zeke
                [/have_unit]
                [then]
                    #Victory if they are
                    {ELIADOR_ENDLEVEL}
                [/then]
                [else]
                    #Defeat if Anna or Zeke not on your side
                    [endlevel]
                        result=defeat
                    [/endlevel]
                [/else]
            [/if]
        [/then]
    [/if]
#enddef

[event]
    name=new turn
    first_time_only=no

    {CHECK_GAME_OVER}
    {VARIABLE prev_checker_count $checker_count}

    #Ardella and Othello go back to column castles
    [teleport]
        x,y=11,4
        [filter]
            description=Ardella
        [/filter]
    [/teleport]
    [teleport]
        x,y=11,19
        [filter]
            description=Othello
        [/filter]
    [/teleport]

    {VARIABLE valid_move no}
    [if]
        [variable]
            name=col
            greater_than=0
        [/variable]
        [variable]
            name=row
            greater_than=0
        [/variable]
        [then]
            {CHECK_MOVE $col $row 3}
            {MOVE_TO_BOARD (
            #Move next unit to board
            [store_unit]
                variable=store
                [filter]
                    x,y=10-12,1-2
                [/filter]
            [/store_unit]
            [scroll_to]
                x=$col
                y=$row
            [/scroll_to]
            [delay]
                time=1000
            [/delay]
            [teleport]
                x=$col
                y=$row
                [filter]
                    x=$store[0].x
                    y=$store[0].y
                [/filter]
            [/teleport]
            {CLEAR_VARIABLE store}

            #Ensure that there is at least one unit at the top
            [if]
                [have_unit]
                    x,y=10-12,1-2
                [/have_unit]
                [else]
                    {VARIABLE n $turn_number}
                    {VARIABLE_OP n modulo 2}
                    [if]
                        [variable]
                            name=n
                            equals=0
                        [/variable]
                        [then]
                            {UNIT_NAMELESS Peasant 3 11 1}
                        [/then]
                        [else]
                            {UNIT_NAMELESS Woodsman 3 11 1}
                        [/else]
                    [/if]
                [/else]
            [/if])}
            [delay]
                time=1000
            [/delay]
        [/then]
    [/if]

    #Remove row and column marker
    [removeitem]
        x=$col
        y=$row
    [/removeitem]

    #Erase row and column
    {VARIABLE col -1}
    {VARIABLE row -1}

    #Find best AI move
    {VARIABLE valid_move no}

    #Check corners
    {CHECK_MOVE 6 6 4}
    {CHECK_MOVE 6 16 4}
    {CHECK_MOVE 16 6 4}
    {CHECK_MOVE 16 16 4}

    #Check edges not adjacent to corners
    {CHECK_MOVE 10 6 4}
    {CHECK_MOVE 10 16 4}
    {CHECK_MOVE 12 6 4}
    {CHECK_MOVE 12 16 4}
    {CHECK_MOVE 6 10 4}
    {CHECK_MOVE 6 12 4}
    {CHECK_MOVE 16 10 4}
    {CHECK_MOVE 16 12 4}

    #Check central locations not adjacent to corners
    {CHECK_MOVE 10 8 4}
    {CHECK_MOVE 12 8 4}
    {CHECK_MOVE 8 10 4}
    {CHECK_MOVE 10 10 4}
    {CHECK_MOVE 12 10 4}
    {CHECK_MOVE 14 10 4}
    {CHECK_MOVE 8 12 4}
    {CHECK_MOVE 10 12 4}
    {CHECK_MOVE 12 12 4}
    {CHECK_MOVE 14 12 4}
    {CHECK_MOVE 10 14 4}
    {CHECK_MOVE 12 14 4}

    #Check edge locations adjacent to corners
    {CHECK_MOVE 8 6 4}
    {CHECK_MOVE 14 6 4}
    {CHECK_MOVE 8 16 4}
    {CHECK_MOVE 14 16 4}
    {CHECK_MOVE 6 8 4}
    {CHECK_MOVE 6 14 4}
    {CHECK_MOVE 16 8 4}
    {CHECK_MOVE 16 14 4}

    #Check locations diagonal and adjacent to corners
    {CHECK_MOVE 8 8 4}
    {CHECK_MOVE 8 14 4}
    {CHECK_MOVE 14 8 4}
    {CHECK_MOVE 14 14 4}

    {MOVE_TO_BOARD (
    [scroll_to_unit]
        description=Othello
    [/scroll_to_unit]
    [delay]
        time=1000
    [/delay]
    {MOVE_UNIT (description=Othello) $valid_x 18}
    [delay]
        time=1000
    [/delay]
    [teleport]
        x,y=19,12
        [filter]
            description=Othello
        [/filter]
    [/teleport]
    [scroll_to_unit]
        description=Othello
    [/scroll_to_unit]
    [delay]
        time=1000
    [/delay]
    {MOVE_UNIT (description=Othello) 18 $valid_y}
    [delay]
        time=1000
    [/delay]
    [scroll_to]
        x=$valid_x
        y=$valid_y
    [/scroll_to]
    [delay]
        time=1000
    [/delay]
    #Alternate Skeleton/Skeleton Archer
    {VARIABLE n $turn_number}
    {VARIABLE_OP n modulo 2}
    [if]
        [variable]
            name=n
            equals=0
        [/variable]
        [then]
            {UNIT_NAMELESS Skeleton 4 $valid_x $valid_y}
        [/then]
        [else]
            {UNIT_NAMELESS (Skeleton Archer) 4 $valid_x $valid_y}
        [/else]
    [/if]
    {CLEAR_VARIABLE n}
    [redraw] [/redraw])}
    [delay]
        time=1000
    [/delay]

    {CHECK_GAME_OVER}
[/event]

[event]
    name=moveto
    first_time_only=no
    [filter]
        description=Ardella
    [/filter]

    #Not allowed to make more than one move
    [if]
        [variable]
            name=col
            greater_than=0
        [/variable]
        [variable]
            name=row
            greater_than=0
        [/variable]
        [then]
            {UNIT_MSG (description=Othello) ( _ "No cheating!")}
            [endlevel]
                result=defeat
            [/endlevel]
        [/then]
    [/if]

    #Ardella teleports to other castle if moved to ruined castle
    [if]
        [have_location]
            x=$x1
            y=$y1
            terrain=Chr
        [/have_location]
        [then]
            #If at column castle, go to row castle
            [if]
                [variable]
                    name=y1
                    less_than=6
                [/variable]
                [then]
                    {PLACE_IMAGE misc/red-hex.png $x1 6}
                    {PLACE_IMAGE misc/red-hex.png $x1 8}
                    {PLACE_IMAGE misc/red-hex.png $x1 10}
                    {PLACE_IMAGE misc/red-hex.png $x1 12}
                    {PLACE_IMAGE misc/red-hex.png $x1 14}
                    {PLACE_IMAGE misc/red-hex.png $x1 16}
                    {VARIABLE col $x1}
                    [delay]
                        time=1000
                    [/delay]
                    [teleport]
                        x,y=3,12
                        [filter]
                            x=$x1
                            y=$y1
                        [/filter]
                    [/teleport]

                    {MODIFY_UNIT (description=Ardella) moves 20}
                [/then]

                #If at row castle, go to column castle
                [else]
                    {VARIABLE row $y1}

                    #Remove all but one red hex
                    {VARIABLE y 6}
                    [while]
                        [variable]
                            name=y
                            less_than=17
                        [/variable]
                        [do]
                            [if]
                                [variable]
                                    name=y
                                    equals=$row
                                [/variable]
                                [else]
                                    [removeitem]
                                        x=$col
                                        y=$y
                                    [/removeitem]
                                [/else]
                            [/if]
                            {VARIABLE_OP y add 2}
                        [/do]
                    [/while]
                    [redraw] [/redraw]
                [/else]
            [/if]

            [if]
                [variable]
                    name=col
                    greater_than=0
                [/variable]
                [variable]
                    name=row
                    greater_than=0
                [/variable]
                [then]
                    #Ardella made her move
                    {MODIFY_UNIT (description=Ardella) moves 0}
                [/then]
            [/if]

            #Scroll to Ardella
            [scroll_to_unit]
                description=Ardella
            [/scroll_to_unit]
            [delay]
                time=1000
            [/delay]
        [/then]
    [/if]
[/event]

[event]
    name=defeat
    {UNIT_MSG (description=Othello) ( _ "You've sacrificed your children in an attempt to save your soldiers. Your heart is even colder than mine.")}
[/event]

[event]
    name=victory

    {CLEAR_VARIABLE valid_movw}
    {CLEAR_VARIABLE valid_x}
    {CLEAR_VARIABLE valid_y}
    {CLEAR_VARIABLE valid_x_inc}
    {CLEAR_VARIABLE valid_y_inc}
    {CLEAR_VARIABLE valid_side}
    {CLEAR_VARIABLE col}
    {CLEAR_VARIABLE row}
    {CLEAR_VARIABLE checker_count}
    {CLEAR_VARIABLE prev_checker_count}
    {CLEAR_VARIABLE valid_dir_count}
    {CLEAR_VARIABLE valid_dir_0_x}
    {CLEAR_VARIABLE valid_dir_0_y}
    {CLEAR_VARIABLE valid_dir_1_x}
    {CLEAR_VARIABLE valid_dir_1_y}
    {CLEAR_VARIABLE valid_dir_2_x}
    {CLEAR_VARIABLE valid_dir_2_y}
    {CLEAR_VARIABLE valid_dir_3_x}
    {CLEAR_VARIABLE valid_dir_3_y}
    {CLEAR_VARIABLE valid_dir_4_x}
    {CLEAR_VARIABLE valid_dir_4_y}
    {CLEAR_VARIABLE valid_dir_5_x}
    {CLEAR_VARIABLE valid_dir_5_y}
    {CLEAR_VARIABLE valid_dir_6_x}
    {CLEAR_VARIABLE valid_dir_6_y}
    {CLEAR_VARIABLE valid_dir_7_x}
    {CLEAR_VARIABLE valid_dir_7_y}

    {UNIT_MSG (description=Othello) ( _ "Well done, Ardella, you've protected your children. You can keep the skeletons that you've won, and I'll keep any man or creature that you've lost. Goodbye.")}

    #Store units that Othello won
    {STORE_UNITS othello_slave_store (side=4) no}

    #Note: Ardella already stored (backup)
    {STORE_UNITS zeke_store (description=Zeke) no}
    {STORE_UNITS anna_store (description=Anna) no}
    {STORE_UNITS anwar_store (
    [not]
        side=4
    [/not]
    race=monster) no}
    {STORE_UNITS illien_store (
    side=3
    [not]
        description=Anna
    [/not]
    [not]
        description=Zeke
    [/not]
    [not]
        race=monster
    [/not]) no}
[/event]
